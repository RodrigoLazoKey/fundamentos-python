# -*- coding: utf-8 -*-
"""Tarea 10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WaUkNv-e3prW9pmtXMxrjS1KkRATwdfw
"""

'''
Tarea:        Tarea 10
Ejercicio:         Tarea 10


Autor:        Rodrigo Lazo
Fecha:        2025-06-2
Estado:       [ Terminado ]
'''


import numpy as np

my_list = [1, 2, 3, 4, 5]
arr = np.array(my_list)
print(arr)
zeros = np.zeros(5)
print(zeros)
ones = np.ones(5)
print(ones)
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
resultado = arr1 + arr2
resultado = arr1 * arr2

"""Broadcasting"""

arr = np.array([1, 2, 3])
result = arr + 5
arr1 = np.array([1, 2, 3])
arr2 = np.array([[10], [20], [30]])
result = arr1 + arr2


"""Técnicas avanzadas de NumPy"""
arr = np.array([1, 2, 3, 4, 5])
slice = arr[1:4]
# Recupera los elementos 2, 3 y 4

# Indexación booleana
arr = np.array([1, 2, 3, 4, 5])
mask = arr > 2
result = arr[mask]
# Recupera los elementos donde la condición es verdadera: [3, 4, 5]

arr = np.array([1, 2, 3, 4, 5])
indices = np.array([0, 2, 4])
result = arr[indices]
# Recupera los elementos en los índices especificados: [1, 3, 5]

#Concatenación
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
concatenated = np.concatenate((arr1, arr2))

#División
arr = np.array([1, 2, 3, 4, 5, 6])
split = np.split(arr, 3) # Divide la matriz en 3 partes iguales

import numpy as np
consumo = np.array([
    [12.5, 13.2, 11.9, 14.0, 13.5, 15.0, 14.3],
    [10.1, 10.5, 10.0, 11.2, 11.5, 12.0, 11.8],
    [14.0, 14.2, 13.9, 15.5, 15.1, 16.0, 15.8],
    [9.0, 9.2, 8.9, 9.5, 9.8, 10.0, 9.7],
    [16.2, 16.5, 16.0, 17.1, 17.4, 18.0, 17.8],
    [11.0, 11.3, 11.1, 12.0, 12.4, 12.8, 12.5],
    [13.5, 13.8, 13.2, 14.1, 14.6, 15.0, 14.9],
    [10.8, 11.0, 10.6, 11.5, 11.8, 12.2, 12.0],
    [15.1, 15.5, 15.0, 16.0, 16.4, 17.0, 16.7],
    [8.5, 8.7, 8.4, 9.0, 9.2, 9.5, 9.3],
])
print("Dimensiones:", consumo.ndim)
print("Forma:", consumo.shape)
print("Tipo de datos:", consumo.dtype)
print("Consumo primer hogar:", consumo[0])
print("Consumo del hogar 5 el dia viernes(dia 5):", consumo[4, 4])
print("Consumo de los ultimos 3 hogares los domingos:", consumo[-3:, 6])

fines_de_semana = consumo[:, 5:7]

promedio_fines_de_semana = np.mean(fines_de_semana, axis=1)

print(f"Este es el promedio de los fines de semana de todos los hogares:", promedio_fines_de_semana)

promedio_por_hogar = np.mean(consumo, axis=1)
promedio_por_dia = np.mean(consumo, axis=0)
promedio_consumo = np.sum(consumo)
print(promedio_por_hogar)
print(promedio_por_dia)
print(promedio_consumo)


maximos = np.max(consumo, axis=1)
minimos = np.min(consumo, axis=0)
desviacion = np.std(consumo)

desviaciones = np.std(consumo, axis=0)
dia_max_desviacion = np.argmax(desviaciones)
print(f"numero del dia maximo:", dia_max_desviacion)

print(maximos)
print(minimos)
print(desviacion)

consumo_total_hogar = np.sum(consumo, axis=1)
hogar_mayor_consumo = np.argmax(consumo_total_hogar)
hogar_mas_eficiente = np.argmin(consumo_total_hogar)
print(consumo_total_hogar)
print(hogar_mayor_consumo)
print(hogar_mas_eficiente)

consumo_total_hogar = np.sum(consumo, axis=1)
print(f"Consumo total de cada hogar durante la semana: {consumo_total_hogar}")

indices_menor_consumo = np.argsort(consumo_total_hogar)[:3]
for i in indices_menor_consumo:
  print(f"Indice de hogar con menor consumo: {i} y su valor es: {consumo_total_hogar[i]}", )



altos = consumo_total_hogar > 100
consumo_mayor_100 = np.where(altos)[0]
print(f"ids de hogares con consumo mayor a 100: {consumo_mayor_100}")


consumo_normalizado = (consumo - consumo.min())/(consumo.max() - consumo.min())
print(consumo_normalizado)



consumo_hogar3 = consumo_total_hogar[2]
consumo_hogar3_aumentado = consumo_hogar3 * 1.10
nuevo_total = np.sum(consumo_hogar3_aumentado)
print(f"Nuevo consumo total semanal del hogar 3: {nuevo_total} ")

"""Cuestionario
1. ¿Cuál es el consumo del hogar 5 el viernes (día 5)?
Esto fue lo que ocupe para conseguirlo:
print("Consumo del hogar 5 el dia viernes(dia 5):", consumo[4, 4])
Este fue el resultado:
Consumo del hogar 5 el dia viernes(dia 5): 17.4

2. Usando indexación, muestra el consumo de los últimos 3 hogares el domingo.
Esto fue lo que ocupe para conseguirlo:
print("Consumo de los ultimos 3 hogares los domingos:", consumo[-3:, 6])
Este fue el resultado:
Consumo de los ultimos 3 hogares los domingos: [12.  16.7  9.3]

3. Calcula el promedio de consumo los fines de semana (sábado y domingo, columnas 5 y 6).
Esto fue lo que ocupe para conseguirlo:
fines_de_semana = consumo[:, 5:7]
promedio_fines_de_semana = np.mean(fines_de_semana, axis=1)
print(f"Este es el promedio de los fines de semana de todos los hogares:", promedio_fines_de_semana)
Este fue el resultado:
Este es el promedio de los fines de semana de todos los hogares: [14.65 11.9  15.9   9.85 17.9  12.65 14.95 12.1  16.85  9.4 ]

4. ¿Qué día de la semana tiene la mayor desviación estándar entre hogares? Explica qué indica esto.
Esto fue lo que ocupe para conseguirlo:
desviaciones = np.std(consumo, axis=0)
dia_max_desviacion = np.argmax(desviaciones)
print(f"numero del dia maximo:", dia_max_desviacion)
Este fue el resultado:.
numero del dia maximo: 5
aqui indica cuanta variación de energia hay entre los hogares, y el dia que mas variación hay es el dia sabado, que ocupa el indice número 5

5. Identifica los 3 hogares con menor consumo total durante la semana. Muestra sus índices y valores.
Esto fue lo que ocupe para conseguirlo:
indices_menor_consumo = np.argsort(consumo_total_hogar)[:3]
for i in indices_menor_consumo:
  print(f"Indice de hogar con menor consumo: {i} y su valor es: {consumo_total_hogar[i]}", )
Este fue el resultado:
Indices de hogares con menor consumo: 9 y su valor es: 62.599999999999994
Indices de hogares con menor consumo: 3 y su valor es: 66.10000000000001
Indices de hogares con menor consumo: 1 y su valor es: 77.1

6. Si el hogar 3 aumenta su consumo en un 10% cada día, ¿cuál sería su nuevo consumo total semanal?
Esto fue lo que ocupe para conseguirlo:
consumo_hogar3 = consumo_total_hogar[2]
consumo_hogar3_aumentado = consumo_hogar3 * 1.10
nuevo_total = np.sum(consumo_hogar3_aumentado)
print(f"Nuevo consumo total semanal del hogar 3: {nuevo_total} ")
Este fue el resultado:
Nuevo consumo total semanal del hogar 3: 114.95



"""